pip install visualkeras
pip install ann_visualizer
pip install graphviz #установка библиотек для визуализации

# Import necessary libraries
import pandas as pd
import numpy as np                               # Import numpy
from skimage import data, io   # Import skimage library (data - Test images and example data.
#                          io - Reading, saving, and displaying images.)
from skimage.color import rgb2gray
import matplotlib.pyplot as plt                  # Import matplotlib.pyplot (Plotting framework in Python.)
%matplotlib inline
import os                                        # This module provides a portable way of using operating system dependent functionality.
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
import warnings
# Suppress warnings
warnings.filterwarnings('ignore')
from IPython.display import display
import cv2 as cv
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split
from tensorflow.keras import utils
from tensorflow.keras.models import Sequential,load_model
from tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization
from tensorflow.keras.optimizers import Adam
import tensorflow as tf
import seaborn as sns

def construct_model():
  model = Sequential()
  model.add(Conv2D(filters=64, kernel_size=(3, 3), input_shape=(128, 128, 1), activation=’relu’))
  model.add(Conv2D(filters=64, kernel_size=(3, 3), activation=’relu’))
  model.add(MaxPool2D((2, 2)))
  model.add(Flatten())
  model.add(Dense(256, activation=’relu’))
  model.add(Dense(12, activation=’softmax’))
  model.compile(loss=’categorical_crossentropy’, optimizer=’adam’, metrics=[‘accuracy’])
  return model


def sconstruct_model():
  smodel = Sequential()
  smodel.add(Conv2D(filters=64, kernel_size=(3, 3), input_shape=(128, 128, 3), activation=’relu’))
  smodel.add(Conv2D(filters=64, kernel_size=(3, 3), activation=’relu’))
  smodel.add(MaxPool2D((2, 2)))
  smodel.add(Conv2D(filters=128, kernel_size=(3, 3), activation=’relu’))
  smodel.add(Conv2D(filters=128, kernel_size=(3, 3), activation=’relu’))
  smodel.add(MaxPool2D((2, 2)))
  smodel.add(Conv2D(filters=128, kernel_size=(3, 3), activation=’relu’))
  smodel.add(Conv2D(filters=128, kernel_size=(3, 3), activation=’relu’))
  smodel.add(MaxPool2D((2, 2)))
  smodel.add(Flatten())
  smodel.add(Dense(256, activation=’relu’))
  smodel.add(Dense(12, activation=’softmax’))
  #optimizer = Adam(lr=0.001)
  smodel.compile(loss=’categorical_crossentropy’, optimizer=’adam’, metrics=[‘accuracy’])
  #model.summary()
  return smodel


def cconstruct_model(learningRate):
  smodel = Sequential()
  smodel.add(Conv2D(filters=32, kernel_size=(3, 3), input_shape=(128, 128, 1), activation=’relu’))
  smodel.add(Conv2D(filters=32, kernel_size=(3, 3), activation=’relu’))
  smodel.add(MaxPool2D((2, 2)))
  smodel.add(Conv2D(filters=64, kernel_size=(3, 3), activation=’relu’))
  smodel.add(Conv2D(filters=64, kernel_size=(3, 3), activation=’relu’))
  smodel.add(MaxPool2D((2, 2)))
  smodel.add(Conv2D(filters=128, kernel_size=(3, 3), activation=’relu’))
  smodel.add(Conv2D(filters=128, kernel_size=(3, 3), activation=’relu’))
  smodel.add(MaxPool2D((2, 2)))
  smodel.add(Flatten())
  smodel.add(Dense(256, activation=’relu’))
  smodel.add(Dense(256, activation=’relu’))
  smodel.add(Dense(12, activation=’softmax’))
  optimizer = Adam(lr=learningRate)
  smodel.compile(loss=’categorical_crossentropy’, optimizer=optimizer, metrics=[‘accuracy’])
  smodel.summary()
  return smodel
  model=cconstruct_model(0.001)

model=construct_model()

from ann_visualizer.visualize import ann_viz
ann_viz(model, view=True, filename=”cconstruct_model”, title=”CNN — Model 1 — Simple Architecture”) #первый вариант представления

model1=construct_model() #второй вариант представления
model2=sconstruct_model()
model3=cconstruct_model(0.009)
import visualkeras
from PIL import ImageFont
visualkeras.layered_view(model1, legend=True)
visualkeras.layered_view(model2, legend=True)
visualkeras.layered_view(model3, legend=True)

#третий вариант представления
tf.keras.utils.plot_model(
model1,
to_file="model.png",
show_shapes=True,
show_dtype=False,
show_layer_names=True,
rankdir="TB",
expand_nested=True,
dpi=96,
layer_range=None,
show_layer_activations=True,
)

#четвертый вариант представления
%load_ext tensorboard
from datetime import datetime
from tensorflow import keras
# Define the Keras TensorBoard callback.
logdir="logs/fit/" + datetime.now().strftime("%Y%m%d-%H%M%S")
tensorboard_callback = keras.callbacks.TensorBoard(log_dir=logdir)


